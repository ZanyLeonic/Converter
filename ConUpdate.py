import argparse, requests, sys, configparser, zipfile, os, shutil
from urllib.parse import urlparse, parse_qs

appname="ConverterUpdater"
author="Leo Durrant (2017)"
builddate="05/10/17"
version="0.1a"
release="alpha"

filesdelete=['ConUpdate.py', 'Converter.py', 'LBT.py', 'ConverterGUI.py', 'LBTGUI.py']
directoriesdelete=['convlib\\', 'LBTLIB\\', "data\\images\\", "data\\text\\"]

def readvaluefromconfig(filename, section, valuename):
    try:
        config = configparser.ConfigParser()
        config.read(filename)
        try:
            val = config[section][valuename]
            return val
        except Exception as e:
            print("Cannot find value %s in %s. Check %s.\n Exception: %s" % (valuename, section, filename, str(e)))
            return None
    except Exception as e:
        print("Cannot read %s.\n Exception: %s" % (filename, str(e)))
        return None

parser = argparse.ArgumentParser(description='Updater for Converter')

parser.add_argument('-cfg', '--config', nargs="?", help="The path to the configuration file. (Usually generated by Converter.)")

args= parser.parse_args()

parameterfile=args.config

if parameterfile == None:
    parameterfile="updater.ini"
else:
    parameterfile=str(parameterfile)

executeafterupdate=True
updatedownloadurl=urlparse(readvaluefromconfig(parameterfile, "updater", "downloadurl"))
appinstall=readvaluefromconfig(parameterfile, "updater", "appinstall")
executablefile=readvaluefromconfig(parameterfile, "updater", "executablefn")
keepconfig=readvaluefromconfig(parameterfile, "updater", "keepconfig")

if os.path.exists(appinstall):
    if os.path.isdir(appinstall):
        print("Directory found!")
    else:
        print("Path is not a directory.")
        sys.exit(1)
else:
    print("Path doesn't exist.")
    sys.exit(1)

if not os.path.exists("{}\\{}".format(appinstall, executablefile)):
    executeafterupdate=False

temporaryfile="download.tmp"

# print(str(args.config))

def downloadfile():
    try:
        with open(temporaryfile, "wb") as f:
            print("Connecting...", end="")
            response = requests.get(updatedownloadurl.geturl(), stream=True)
            print("\rConnected!   ")
            total_length = response.headers.get('content-length')

            if not total_length is None:
                print("Downloading %s to %s (%s B)" % (str(updatedownloadurl.geturl()), temporaryfile, total_length))
            else:
                print("Downloading %s..." % (temporaryfile))

            if total_length is None:
                f.write(response.content)
            else:
                total_length=int(total_length)
                for data in response.iter_content(chunk_size=4096):
                    # done = int(50 * dl / total_length)
                    # print("\r%s/%sB" % (done, total_length))
                    # dl += len(data)
                    f.write(data)
        cleanfiles()
        #print("\r%s/%sB" % (done, total_length))
    except Exception as e:
        print("\n\nFailed to connect to %s. Check the update parameters or try again later.\nException: %s" % (str(updatedownloadurl.geturl()), str(e)))

def cleanfiles():
    
    for file in filesdelete:
        fullpath="{}\\{}".format(appinstall, file)

        if not os.path.exists(fullpath):
            print("%s does not exist." % (fullpath))
        else:
            try:
                os.remove(fullpath)
                print("Deleted %s!" % (fullpath))
            except Exception as e:
                print("\n\nFailed to delete %s!\nException: %s" % (fullpath, str(e)))
    
    for dirs in directoriesdelete:
        fullpath="{}\\{}".format(appinstall, dirs)

        if not os.path.exists(fullpath):
            print("%s does not exist." % (fullpath))
        else:
            try:
                shutil.rmtree(fullpath)
                print("Deleted %s!" % (fullpath))
            except Exception as e:
                print("\n\nFailed to delete %s!\nException: %s" % (fullpath, str(e)))
    
    extractfile(temporaryfile)

def extractfile(file):
    print("Extracting %s to %s. Please wait!" % (str(file), appinstall))
    try:
        with zipfile.ZipFile(file, "r") as zip_r:
            zip_r.extractall(appinstall)
    except zipfile.BadZipfile as e:
        print("\n\nAttempted to extract a bad zip file '%s'!\nException: %s" % (file, str(e)))
    except Exception as e:
        print("\n\nAn error occurred while trying to extract '%s'.\nException %s" % (file, str(e)))

    print("Cleaning temporary files...")
    try:
        os.remove(file)
    except Exception as e:
        print("\n\nAn erro occurred while trying to delete temporary files.\n Exception: %s" % (str(e)))

    runapp()

def runapp():
    try:
        pythonlocation=sys.executable
        executablefullpath="{}\\{}".format(appinstall, executablefile)

        print("Attempting to run app...")
        os.system('{} {}'.format(pythonlocation, executablefullpath))
    except Exception as e:
        raise e

downloadfile()